# -*- coding: utf-8 -*-
"""Análise de Diagnóstico.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vdSa7Y66b3ViN1wfPkKLiznYgRqXAbVW

Explicação do Código:
Gerando dados sintéticos:

Idade: distribuída em três categorias (jovem, meia-idade, idoso).
IMC: valores 0 (normal) ou 1 (sobrepeso).
Pressão Arterial: valores 0 (normal) ou 1 (alta).
Nível de Glicose: valores 0 (normal) ou 1 (alta).
Diagnóstico de Diabetes: variável alvo. A probabilidade de diabetes aumenta com o IMC, pressão alta ou glicose alta.
Construindo e treinando o modelo:

A estrutura da rede é a mesma que definimos anteriormente.
Usamos a técnica de Máxima Verossimilhança para aprender os parâmetros a partir dos dados gerados.
Inferência:

Fazemos uma consulta ao modelo para prever a probabilidade de diabetes em um paciente com características específicas: idade avançada, sobrepeso e pressão alta.
Saída Esperada:
O modelo retornará as probabilidades de o paciente ter ou não diabetes com base nas variáveis fornecidas como evidência.
"""

pip install pgmpy

import numpy as np
import pandas as pd
from pgmpy.models import BayesianNetwork
from pgmpy.estimators import MaximumLikelihoodEstimator
from pgmpy.inference import VariableElimination

# Fixando a semente para a reprodutibilidade
np.random.seed(42)

# Gerando 500 amostras de dados sintéticos
n_samples = 500

# Variáveis simuladas
idade = np.random.choice([0, 1, 2], size=n_samples, p=[0.3, 0.5, 0.2])  # 0: jovem, 1: meia-idade, 2: idoso
imc = np.random.choice([0, 1], size=n_samples, p=[0.4, 0.6])  # 0: normal, 1: sobrepeso
pressao = np.random.choice([0, 1], size=n_samples, p=[0.6, 0.4])  # 0: normal, 1: alta
glicose = np.random.choice([0, 1], size=n_samples, p=[0.5, 0.5])  # 0: normal, 1: alta

# Diagnóstico de diabetes baseado nas variáveis anteriores (simplificação)
# Aumentando a probabilidade de diabetes se o IMC, pressão e glicose estiverem altos
diabetes = []
for i in range(n_samples):
    if glicose[i] == 1 or (imc[i] == 1 and pressao[i] == 1):
        diabetes.append(np.random.choice([0, 1], p=[0.3, 0.7]))  # Alta chance de diabetes
    else:
        diabetes.append(np.random.choice([0, 1], p=[0.7, 0.3]))  # Baixa chance de diabetes

# Criando um dataframe com os dados
data = pd.DataFrame({'Idade': idade, 'IMC': imc, 'Pressao_Arterial': pressao, 'Glicose': glicose, 'Diabetes': diabetes})

print(data.head())  # Exibir as 5 primeiras linhas dos dados

# Construindo o modelo bayesiano com base na estrutura definida
modelo = BayesianNetwork([
    ('Idade', 'IMC'),
    ('Idade', 'Pressao_Arterial'),
    ('IMC', 'Pressao_Arterial'),
    ('IMC', 'Glicose'),
    ('Pressao_Arterial', 'Glicose'),
    ('Glicose', 'Diabetes'),
    ('Pressao_Arterial', 'Diabetes')
])

# Aprender os parâmetros usando o estimador de Máxima Verossimilhança (ML)
modelo.fit(data, estimator=MaximumLikelihoodEstimator)

# Validar se o modelo foi treinado corretamente
print(modelo.check_model())

# Inferência com o modelo ajustado
infer = VariableElimination(modelo)

# Exemplo: Prever a probabilidade de Diabetes para um paciente de Idade = 2 (idoso), IMC = 1 (sobrepeso) e Pressao_Arterial = 1 (alta)
resultado = infer.query(variables=['Diabetes'], evidence={'Idade': 2, 'IMC': 1, 'Pressao_Arterial': 1})
print(resultado)